<!-- 
copyright to Gungoren, Ugur
All rights reserved. Super Confidential.
 -->
<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:atch="clr-namespace:CombatTable.Attached"                
    xmlns:view="clr-namespace:CombatTable.UserControls"
    xmlns:conv="clr-namespace:CombatTable.Converters"
    xmlns:styles="clr-namespace:CombatTable.Styles"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <styles:CustomDataTemplateSelector x:Key="DataTemplateSelector"/>
    <styles:CustomSummaryDataTemplateSelector x:Key="SummaryDataTemplateSelector"/>

    <!-- property editor text box style -->
    <Style x:Key="PropertyTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="{DynamicResource ControlTextBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="atch:AttachedProperties.DisableFocusBorder" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Name="OuterBorder" SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0">
                        <ScrollViewer Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Background="{TemplateBinding Background}">
                            <ScrollViewer.Style>
                                <Style TargetType="{x:Type ScrollViewer}">
                                    <Setter Property="OverridesDefaultStyle" Value="true" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                                <Grid Name="OuterGrid">
                                                    <Border Name="RoundingHelperBorder" CornerRadius="0" Background="{Binding RelativeSource={RelativeSource FindAncestor , AncestorType={x:Type TextBox}}, Path=Background}" />
                                                    <Grid Name="InnerGrid" Margin="1">
                                                        <Grid.ColumnDefinitions>
                                                            <ColumnDefinition Width="*" />
                                                            <ColumnDefinition Width="Auto" />
                                                        </Grid.ColumnDefinitions>
                                                        <Grid.RowDefinitions>
                                                            <RowDefinition Height="*" />
                                                            <RowDefinition Height="Auto" />
                                                        </Grid.RowDefinitions>
                                                        <ScrollContentPresenter HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Name="PART_TextArea" Grid.Column="0" Grid.Row="0" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="false" CanVerticallyScroll="false"/>
                                                    </Grid>
                                                </Grid>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ScrollViewer.Style>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="atch:AttachedProperties.HeaderEditor" Value="True">
                            <Setter Property="FontWeight" Value="Bold"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="true"/>
                                <Condition Property="IsReadOnly" Value="false"/>
                                <Condition Property="atch:AttachedProperties.DisableFocusBorder" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource ControlTextBackgroundBrush}"/>
                            <Setter Property="FontWeight" Value="Bold"/>
                            <Setter Value="{DynamicResource ControlFocusBrush}" Property="BorderBrush" TargetName="OuterBorder"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="true"/>
                                <Condition Property="IsReadOnly" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource ControlTextBackgroundBrush}"/>
                            <Setter Property="FontWeight" Value="Bold"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="atch:AttachedProperties.DisableFocusBorder" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Value="{DynamicResource ControlFocusBrush}" Property="BorderBrush" TargetName="OuterBorder"/>
                            <Setter Property="Cursor" Value="Hand"/>
                        </MultiTrigger>
                        <Trigger Property="IsReadOnly" Value="true">
                            <Setter TargetName="OuterBorder" Value="Transparent" Property="Background" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonBaseStyle" TargetType="{x:Type ButtonBase}">
        <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <view:Filler x:Name="_filler" IsPressed="{TemplateBinding IsPressed}" PressedBackground="Transparent"
                                IsMouseOver="{TemplateBinding IsMouseOver}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"
                                 />
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" Name="_contentPresenter" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="_filler" Property="IsPressed" Value="True" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"></Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource ControlFocusBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource ControlFocusBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- property delete button style-->
    <Style TargetType="{x:Type Button}" x:Key="DeleteItemButtonStyle">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="True"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Margin" Value="5,2,5,2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}" x:Name="PART_Button">
                    <Border CornerRadius="5" Background="Transparent" Padding="0" Width="16" Height="16" x:Name="PART_Border">
                        <Grid Background="Transparent" Width="14" Height="14" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="True" x:Name="PART_CrossGrid">
                            <Line X1="2" Y1="1" X2="12" Y2="11" Stroke="White" StrokeThickness="3" Focusable="False" x:Name="PART_Line1"/>
                            <Line X1="2" Y1="11" X2="12" Y2="1" Stroke="White" StrokeThickness="3" Focusable="False" x:Name="PART_Line2"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand" TargetName="PART_CrossGrid"/>
                            <Setter Property="Background" Value="Red" TargetName="PART_Border"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- property new button style -->
    <Style TargetType="{x:Type Button}" x:Key="NewItemButtonStyle">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="True"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Margin" Value="5,2,5,2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}" x:Name="PART_Button">
                    <Border CornerRadius="5" Background="Transparent" Padding="0" Width="16" Height="16" x:Name="PART_Border">
                        <Grid Background="Transparent" Width="14" Height="14" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="True" x:Name="PART_PlusGrid">
                            <Line X1="7" Y1="1" X2="7" Y2="12" Stroke="White" StrokeThickness="3" Focusable="False" x:Name="PART_Line1"/>
                            <Line X1="1" Y1="6" X2="13" Y2="6" Stroke="White" StrokeThickness="3" Focusable="False" x:Name="PART_Line2"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand" TargetName="PART_PlusGrid"/>
                            <Setter Property="Background" Value="Blue" TargetName="PART_Border"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- default TreeViewItem style for horizontally stretched view -->
    <Style TargetType="TreeViewItem" BasedOn="{StaticResource {x:Type TreeViewItem}}">
        <Setter Property="Margin" Value="0"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TreeViewItem">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" MinWidth="19" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <ToggleButton IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" Name="Expander">
                            <ToggleButton.Style>
                                <Style TargetType="ToggleButton">
                                    <Setter Property="UIElement.Focusable" Value="false" />
                                    <Setter Property="FrameworkElement.Width" Value="16" />
                                    <Setter Property="FrameworkElement.Height" Value="16" />
                                    <Setter Property="Control.Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="ToggleButton">
                                                <Border Padding="5,5,5,5" Background="#00FFFFFF" Width="16" Height="16">
                                                    <Path Fill="#00FFFFFF" Stroke="#FF989898" Name="ExpandPath">
                                                        <Path.Data>
                                                            <PathGeometry Figures="M0,0L0,6L6,0z" />
                                                        </Path.Data>
                                                        <Path.RenderTransform>
                                                            <RotateTransform Angle="135" CenterX="3" CenterY="3" />
                                                        </Path.RenderTransform>
                                                    </Path>
                                                </Border>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="UIElement.IsMouseOver" Value="True">
                                                        <Setter TargetName="ExpandPath" Property="Shape.Stroke" Value="#FF1BBBFA" />
                                                        <Setter TargetName="ExpandPath" Property="Shape.Fill" Value="#00FFFFFF" />
                                                    </Trigger>
                                                    <Trigger Property="ToggleButton.IsChecked" Value="True">
                                                        <Setter TargetName="ExpandPath" Property="UIElement.RenderTransform">
                                                            <Setter.Value>
                                                                <RotateTransform Angle="180" CenterX="3" CenterY="3" />
                                                            </Setter.Value>
                                                        </Setter>
                                                        <Setter TargetName="ExpandPath" Property="Shape.Fill" Value="#FF595959" />
                                                        <Setter TargetName="ExpandPath" Property="Shape.Stroke" Value="#FF262626" />
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ToggleButton.Style>
                        </ToggleButton>
                        <Border x:Name="Bd" HorizontalAlignment="Stretch" BorderThickness="{TemplateBinding Border.BorderThickness}" BorderBrush="{TemplateBinding Border.BorderBrush}" Padding="{TemplateBinding Control.Padding}" Background="{TemplateBinding Panel.Background}" SnapsToDevicePixels="True" Grid.Column="1">
                            <ContentPresenter x:Name="PART_Header" Content="{TemplateBinding HeaderedContentControl.Header}" ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}" ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}" ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}" ContentSource="Header" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Grid.Column="1" Grid.Row="1" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TreeViewItem.IsExpanded" Value="False">
                            <Setter TargetName="ItemsHost" Property="UIElement.Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ItemsControl.HasItems" Value="False">
                            <Setter TargetName="Expander" Property="UIElement.Visibility" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="TreeViewItem.IsSelected" Value="True">
                            <Setter TargetName="Bd" Property="Panel.Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="TreeViewItem.IsSelected" Value="True" />
                                <Condition Property="Selector.IsSelectionActive" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Panel.Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                        </MultiTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- property header style -->
    <Style TargetType="{x:Type TextBlock}" x:Key="HeaderTextBlock">
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!-- property title style -->
    <Style TargetType="{x:Type TextBlock}" x:Key="TitleTextBlock">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!-- property checkbox style -->
    <Style x:Key="PropertyCheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource ControlTextBrush}" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="MinHeight" Value="28"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Border x:Name="Outer" BorderThickness="2" BorderBrush="Transparent" >
                        <BulletDecorator Background="{TemplateBinding Background}">
                            <BulletDecorator.Bullet>
                                <Grid Name="grid" Width="16" Height="16">
                                    <Border Name="Border" BorderThickness="2" CornerRadius="3" BorderBrush="Transparent" />
                                    <Viewbox>
                                        <Path Name="PART_CheckArea" Stretch="Fill" HorizontalAlignment="Center" VerticalAlignment="Center" Width="10" Height="8" Data="F0 M 137.46721,176.73256 L 171.5,213.5 215.5,151.5 " StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round" Margin="3" Stroke="{DynamicResource ControlFocusBrush}" />
                                    </Viewbox>
                                    <Rectangle Name="_indeterminateRectangle" Visibility="Collapsed" Margin="4" RadiusX="2" RadiusY="2" Fill="{DynamicResource ControlFocusBrush}" />
                                </Grid>
                            </BulletDecorator.Bullet>
                            <Grid>
                                <ContentPresenter Name="PART_CaptionArea" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" RecognizesAccessKey="True" />
                            </Grid>
                        </BulletDecorator>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="PART_CheckArea" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Outer" Value="{DynamicResource ControlFocusBrush}" Property="BorderBrush" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Single Letter checkbox style -->
    <Style x:Key="BulletCheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource ControlTextBrush}" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="MinHeight" Value="28"/>
        <Setter Property="MinWidth" Value="28"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Border x:Name="Outer" BorderThickness="2" BorderBrush="Transparent" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="1">
                        <BulletDecorator Background="{TemplateBinding Background}">
                            <BulletDecorator.Bullet>
                                <Border Name="PART_CheckArea" CornerRadius="16" HorizontalAlignment="Center" VerticalAlignment="Center" Width="18" Height="18" Background="{DynamicResource ControlFocusBrush}" BorderBrush="{DynamicResource ControlFocusBrush}" BorderThickness="2" >
                                    <TextBlock Margin="1" x:Name="TXB" Text="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="White"/>
                                </Border>
                            </BulletDecorator.Bullet>
                        </BulletDecorator>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="PART_CheckArea" Property="Background" Value="Transparent" />
                            <Setter TargetName="TXB" Property="Foreground" Value="Black" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Outer" Value="{DynamicResource ControlFocusBrush}" Property="BorderBrush" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- memorized spell checkbox style -->
    <Style x:Key="MemorizedSpellCheckBoxStyle" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource BulletCheckBoxStyle}">
    </Style>

    <!-- style for combobox item -->
    <Style x:Key="ComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="ContentTemplate" Value="{Binding RelativeSource= {RelativeSource Mode=FindAncestor, AncestorType={x:Type ComboBox}}, Path=ItemTemplate}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="_border" Margin="{TemplateBinding Padding}" Focusable="False" ToolTipService.ToolTip="{Binding RelativeSource= {RelativeSource Mode=FindAncestor, AncestorType={x:Type ComboBoxItem}},Path=Content}" ToolTipService.IsEnabled="False" Background="{TemplateBinding Background}">
                        <Grid>
                            <Separator x:Name="Separator" HorizontalAlignment="Stretch" VerticalAlignment="Center" Height="1.5" IsEnabled="False" Visibility="Hidden" />
                            <AccessText x:Name="ItemContentPresenter" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="Hidden" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" Text="{TemplateBinding Content }">
                            </AccessText>
                            <ContentPresenter Focusable="False" x:Name="ItemContentPresenter2" VerticalAlignment="Center" Margin="2, 1">
                            </ContentPresenter>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Background" TargetName="_border" Value="{DynamicResource ControlFocusBrush}" />
                            <Setter Property="Foreground" Value="White" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- style for combobox toggle button -->
    <Style x:Key="ComboBoxToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <DockPanel Background="{TemplateBinding Background}" LastChildFill="False" SnapsToDevicePixels="True">
                        <Border x:Name="Border" Background="Transparent" BorderBrush="Transparent" BorderThickness="1" DockPanel.Dock="Right" Width="17" Margin="0">
                            <view:Arrow Direction="Down" Width="16" Height="16"  ArrowBrush="Black" IsTriangle="True">
                                <view:Arrow.Template>
                                    <ControlTemplate TargetType="{x:Type view:Arrow}">
                                        <Grid Grid.Row="0" Width="10" Height="10">
                                            <Grid.Resources>
                                                <Style TargetType="{x:Type Line}" >
                                                    <Setter Property="StrokeThickness" Value="3"/>
                                                    <Setter Property="IsHitTestVisible" Value="False"/>
                                                    <Setter Property="Stretch" Value="Uniform"/>
                                                    <Setter Property="Visibility" Value="Collapsed"/>
                                                </Style>
                                            </Grid.Resources>
                                            <!-- these are for right direction -->
                                            <Path Fill="{TemplateBinding ArrowBrush}" Name="_triangle" Data="M 4 2 L 8 5 L 4 8 Z" StrokeThickness="2" Stretch="Uniform" Visibility="Collapsed"/>
                                            <Path Stroke="{TemplateBinding ArrowBrush}" Name="_arrow" Data="M 4 2 L 8 5 M 4 8 L 8 5" StrokeThickness="2" Stretch="Uniform" Visibility="Visible"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="view:Arrow.IsTriangle" Value="True">
                                                <Setter Property="Visibility" TargetName="_triangle" Value="Visible"/>
                                                <Setter Property="Visibility" TargetName="_arrow" Value="Collapsed"/>
                                            </Trigger>
                                            <Trigger Property="view:Arrow.Direction" Value="Left">
                                                <Setter TargetName="_arrow" Property="Data" Value="M 6 2 L 2 5 M 6 8 L 2 5"/>
                                                <Setter TargetName="_triangle" Property="Data" Value="M 6 2 L 2 5 L 6 8 Z"/>
                                            </Trigger>
                                            <Trigger Property="view:Arrow.Direction" Value="Up">
                                                <Setter TargetName="_arrow" Property="Data" Value="M 2 6 L 5 2 M 8 6 L 5 2"/>
                                                <Setter TargetName="_triangle" Property="Data" Value="M 2 6 L 5 2 L 8 6 Z"/>
                                            </Trigger>
                                            <Trigger Property="view:Arrow.Direction" Value="Down">
                                                <Setter TargetName="_arrow" Property="Data" Value="M 2 4 L 5 8 M 8 4 L 5 8"/>
                                                <Setter TargetName="_triangle" Property="Data" Value="M 2 4 L 5 8 L 8 4 Z"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </view:Arrow.Template>
                            </view:Arrow>
                        </Border>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- style for combobox -->
    <Style x:Key="PropertyComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="Margin" Value="4,0,0,0" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Padding" Value="5, 0, 1, 0" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="ItemContainerStyle" Value="{DynamicResource ComboBoxItemStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Border x:Name="Outer" BorderBrush="Transparent" BorderThickness="2">
                        <Grid>
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="0" />
                            <Grid>
                                <Popup x:Name="PART_Popup" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" MaxHeight="150" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom"  
                                       MinWidth="350"  HorizontalAlignment="Stretch">
                                    <Grid>
                                        <Border x:Name="DropDownBorder" BorderBrush="{DynamicResource ControlFocusBrush}" BorderThickness="1" Margin="0" CornerRadius="0" Background="White" />
                                        <ScrollViewer x:Name="DropDownScrollViewer" Margin="1">
                                            <VirtualizingStackPanel Margin="3" Background="{x:Null}" x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" Orientation="Vertical" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" IsItemsHost="True" />
                                        </ScrollViewer>
                                    </Grid>
                                </Popup>
                                <DockPanel>
                                    <FrameworkElement DockPanel.Dock="Right" Width="17" />
                                    <ContentPresenter Name="_contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" TextElement.Foreground="{TemplateBinding Foreground}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" />
                                </DockPanel>
                                <ToggleButton x:Name="_toggleButton" ClickMode="Press" Focusable="False" BorderBrush="Black" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent" SnapsToDevicePixels="True" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" MinWidth="0" MinHeight="0" Width="Auto" Style="{DynamicResource ComboBoxToggleButtonStyle}" />
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource ControlFocusBrush}" TargetName="Outer"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource ControlFocusBrush}" TargetName="Outer"/>
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter TargetName="_toggleButton" Property="IsEnabled" Value="False" />
                            <Setter TargetName="PART_Popup" Property="IsEnabled" Value="False" />
                            <Setter Property="atch:AttachedProperties.SetReadOnly" Value="True"/>
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="False">
                            <Setter Property="atch:AttachedProperties.SetReadOnly" Value="False"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- style for seperator text in character tab -->
    <Style x:Key="Separator" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TitleTextBlock}">
        <Setter Property="Text" Value=", "/>
        <Setter Property="Foreground" Value="Blue"/>
    </Style>

    <!-- memorized spell checkbox style -->
    <Style x:Key="ImageCheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource ControlTextBrush}" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="MinHeight" Value="28"/>
        <Setter Property="MinWidth" Value="28"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Border x:Name="Outer" BorderThickness="2" BorderBrush="Transparent" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="1">
                        <BulletDecorator Background="{TemplateBinding Background}">
                            <ContentPresenter Name="PART_CheckArea" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" />
                        </BulletDecorator>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="PART_CheckArea" Property="Opacity" Value=".15"  />
                            <!--<Setter TargetName="TXB" Property="Foreground" Value="Black" />-->
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Outer" Value="{DynamicResource ControlFocusBrush}" Property="BorderBrush" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- scrollbar custom buttons -->
    <Style TargetType="{x:Type RepeatButton}" x:Key="ScrollBarThumbStyle">
        <Setter Property="UIElement.Focusable" Value="false" />
        <Setter Property="FrameworkElement.Width" Value="16" />
        <Setter Property="FrameworkElement.Height" Value="16" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Padding="2" Background="#00FFFFFF" Width="16" Height="16">
                        <Path Fill="Gray" Stroke="#FF989898" Name="ExpandPath" >
                            <Path.Data>
                                <PathGeometry Figures="M0,0L6,6L6,-6z" />
                            </Path.Data>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter TargetName="ExpandPath" Property="Shape.Stroke" Value="Red" />
                            <Setter TargetName="ExpandPath" Property="Shape.Fill" Value="Red" />
                        </Trigger>
                        <Trigger Property="RepeatButton.IsEnabled" Value="False">
                            <Setter TargetName="ExpandPath" Property="Shape.Stroke" Value="#FF989898" />
                            <Setter TargetName="ExpandPath" Property="Shape.Fill" Value="Transparent" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- style for basic summary items control -->
    <Style TargetType="{x:Type ItemsControl}" x:Key="SummaryItemsControlStyle">
        <Setter Property="ItemTemplateSelector" Value="{DynamicResource SummaryDataTemplateSelector}"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- style for generic items control for non-specific node containers -->
    <Style TargetType="{x:Type ItemsControl}" BasedOn="{StaticResource SummaryItemsControlStyle}" x:Key="SummaryGenericItemsControlStyle">
        <Setter Property="MaxWidth">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource MaxWidthConv}" >
                    <!-- Converter parameters: 
                        #0, SccrollContentPresenter's ActualWidth
                        #1, TreeView
                        #2, Self, ItemsControl
                        #3, Parent, Grid
                        #4+, other children that might affect size, only put to binding so that the elemnt redraw will retrigger to alter maxWidth
                        -->
                    <Binding RelativeSource="{RelativeSource AncestorType=ScrollContentPresenter}" Path="ActualWidth" />
                    <Binding RelativeSource="{RelativeSource AncestorType=TreeView}" />
                    <Binding ElementName="Items"/>
                    <Binding ElementName="VisibleGrid"/>
                    <Binding ElementName="NewBtn" Path="ActualWidth"/>
                    <Binding ElementName="NewBtn" Path="Visibility"/>
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <ScrollViewer MaxWidth="{TemplateBinding MaxWidth}" HorizontalAlignment="Left" MinWidth="100"  x:Name="PART_Scroll" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Hidden" Padding="{TemplateBinding Padding}" CanContentScroll="True">
                        <ItemsPresenter x:Name="PART_Items" />
                        <ScrollViewer.Template>
                            <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition />
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <ScrollContentPresenter Panel.ZIndex="20" x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.RowSpan="2" Margin="9,0,18,0" Grid.ColumnSpan="2"/>
                                    <ScrollBar Panel.ZIndex="10" SmallChange="0.00001" LargeChange="0.00001" VerticalAlignment="Center" x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Height="16">
                                        <ScrollBar.Style>
                                            <Style TargetType="{x:Type ScrollBar}">
                                                <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
                                                <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
                                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                                                <Setter Property="Width" Value="Auto"/>
                                                <Setter Property="MinWidth" Value="0"/>
                                                <Setter Property="Height" Value="10"/>
                                                <Setter Property="MinHeight" Value="10"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                                                            <Grid x:Name="Bg" SnapsToDevicePixels="true" Background="Transparent">
                                                                <Grid.ColumnDefinitions>
                                                                    <ColumnDefinition Width="Auto"/>
                                                                    <ColumnDefinition Width="0.0001*"/>
                                                                    <ColumnDefinition Width="Auto"/>
                                                                </Grid.ColumnDefinitions>
                                                                <RepeatButton x:Name="LeftBtn" Grid.Column="0" Style="{StaticResource ScrollBarThumbStyle}" Command="{x:Static ScrollBar.LineLeftCommand}"  />
                                                                <RepeatButton x:Name="RightBtn" Grid.Column="2" Style="{StaticResource ScrollBarThumbStyle}" Command="{x:Static ScrollBar.LineRightCommand}"  >
                                                                    <RepeatButton.RenderTransform>
                                                                        <RotateTransform Angle="180" CenterX="8" CenterY="2" />
                                                                    </RepeatButton.RenderTransform>
                                                                </RepeatButton>
                                                            </Grid>
                                                            <ControlTemplate.Triggers>
                                                                <DataTrigger Value="True">
                                                                    <DataTrigger.Binding>
                                                                        <MultiBinding Converter="{StaticResource AreEqualConv}">
                                                                            <Binding Path="HorizontalOffset" RelativeSource="{RelativeSource AncestorType=ScrollViewer}"/>
                                                                            <Binding Path="ScrollableWidth" RelativeSource="{RelativeSource AncestorType=ScrollViewer}"/>
                                                                        </MultiBinding>
                                                                    </DataTrigger.Binding>
                                                                    <Setter TargetName="RightBtn" Property="RepeatButton.IsEnabled" Value="False"/>
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding HorizontalOffset, RelativeSource={RelativeSource AncestorType=ScrollViewer}}" Value="0">
                                                                    <Setter TargetName="LeftBtn" Property="RepeatButton.IsEnabled" Value="False"/>
                                                                </DataTrigger>
                                                            </ControlTemplate.Triggers>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </ScrollBar.Style>
                                    </ScrollBar>
                                </Grid>
                            </ControlTemplate>
                        </ScrollViewer.Template>
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>